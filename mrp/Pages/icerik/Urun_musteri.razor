@using mrpAccesLibrary
@using mrpAccesLibrary.Models
@inject NotificationService NotificationService
@inject IMusteri_urun_getir_data _db
<RadzenCard class="m-3" >
    <h3 class="h5">Müşteri Bilgileri</h3>
    <RadzenButton Icon="add_circle_outline" style="margin-bottom: 10px;width:10%"  Click="@InsertRow" Disabled=@(orderToInsert != null) />
       
    <div class="d-flex flex-row" >
        
       <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Simple" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
        Data="@musteri" TItem="musteri_urun_getir" ColumnWidth="%10" LogicalFilterOperator="LogicalFilterOperator.And"  
         @ref="ordersGrid" RowUpdate="@OnUpdateRow">
           
        <Columns>
            <RadzenDataGridColumn Context="order" TItem="musteri_urun_getir" Visible="false" Property="mus_urunid" Filterable="false" Title="ID" Frozen="true" Width="%10" TextAlign="TextAlign.Center" />
            <RadzenDataGridColumn TItem="musteri_urun_getir" Property="mus_urunadi" Title="Ürün Adı" Sortable="true" Filterable="true" Width="20%" >
               <EditTemplate Context="order">
                 <RadzenTextBox Name="txturun" @bind-Value="order.mus_urunadi"  Class="w-500" Style="width:200px" />
            </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="musteri_urun_getir" Property="mus_urunkodu" Title="Ürün kodu"   Sortable="true" Filterable="true" Width="20%" >
                 <EditTemplate Context="order">
                 <RadzenTextBox Name="txturun" @bind-Value="order.mus_urunkodu"  Class="w-500" Style="width:200px"  />
            </EditTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="musteri_urun_getir" Property="musadi" Title="Müşteri Adı"   Sortable="true" Filterable="true" Width="30%" >
             <EditTemplate Context="order">
                <RadzenDropDown  AllowClear="true" TValue="int" Class="w-500" 
                               @bind-Value="order.musid" Data= "Tip"
                                TextProperty="musadi" ValueProperty="musid" Style="width:200px"  />
            </EditTemplate>    
            </RadzenDataGridColumn> 
            <RadzenDataGridColumn TItem="musteri_urun_getir" Context="sampleBlazorModelsSampleOrder" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="30%">
                <Template Context="order">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => EditRow(order))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="order">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@((args) => SaveRow(order))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@((args) => CancelEdit(order))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

        
    </div>
</RadzenCard>
@code {

    private List<musteri_urun_getir> musteri;
    RadzenDataGrid<musteri_urun_getir> ordersGrid;
    musteri_urun_getir orderToInsert;
    private List<musteri_getir> Tip;
    private List<musteri_urun_getir> kontrol1;
    [Parameter]
    public int urunid { get; set; } = 1;
    NotificationMessage? message;
    [CascadingParameter]
    public Urun_ayrinti Layout { get; set; }
    void Change(string text)
    {

    }
    string emptyText = "No Items to display!";
    protected override async Task OnInitializedAsync() 
    {

        musteri = await _db.Mus_urun_getir(urunid);
        Tip = await _db.mus_getir();



    }
    async Task SaveRow(musteri_urun_getir order)
    {
        if (order.mus_urunkodu == string.Empty || order.mus_urunadi == string.Empty || order.musid == 0)
        {
            CancelEdit(order);
        }
        else
        {
            if (order == orderToInsert)
            {
                kontrol1 = await _db.mus_urun_getir(order);
                if (kontrol1.Count == 0)
                {
                    await _db.mus_urun_kaydet(orderToInsert, urunid);
                    orderToInsert = null;
                }
                else
                {
                    orderToInsert = null;

                }
            }
            else
            {

                kontrol1 = await _db.mus_urun_getir_guncel(order);
                if (kontrol1.Count < 1)
                {
                    await _db.mus_guncelle(order, order.mus_urunid);
                }
                else if (kontrol1.Count >= 1)
                {
                    message = new NotificationMessage { Severity = NotificationSeverity.Warning, Summary = "Uyarı", Detail = "Bu ÜRün Daha Evvelden Eklenmiş", Duration = 40000 };
                    Layout.ShowNotification(message);
                }

            }
        }

         ordersGrid.CancelEditRow(order);
          musteri = await _db.Mus_urun_getir(urunid);
    }
 async Task EditRow(musteri_urun_getir order)
    {
        await ordersGrid.EditRow(order);
    }
     async Task CancelEdit(musteri_urun_getir order)
    {
         if (order == orderToInsert)
        {
           
            orderToInsert = null;
        }
        musteri = await _db.Mus_urun_getir(urunid);
        ordersGrid.CancelEditRow(order);
    }
    async Task InsertRow()
    {
        orderToInsert = new musteri_urun_getir();
        await ordersGrid.InsertRow(orderToInsert);
    }
     void OnUpdateRow(musteri_urun_getir order)
    {
        if (order == orderToInsert)
        {
            orderToInsert = null;
        }

        
    }

}
